from colorama import Fore, Style

from vulnerability_scanner import Scanner

TARGET_LINKS_TO_WRITE = "target_LINKS_success"
TARGET_FORMS_XSS_TO_WRITE = "target_forms_XSS_success"
TARGET_LINKS_XSS_TO_WRITE = "target_links_XSS_success"
TARGET_FORMS_COMMAND_EXEC_TO_WRITE = "target_forms_COMMAND_EXEC_success"
TARGET_FORMS_HTML_INJECTION_TO_WRITE = "target_forms_HTML_INJECTION_success"
TARGET_FORMS_SQL_INJECTION_TO_WRITE = "target_forms_SQL_INJECTION_success"
TARGET_FORMS_CSRF_INJECTION_TO_WRITE = "target_forms_CSRF_INJECTION_success"
TARGET_FORMS_NOT_VULNERABLE = "target_forms_not_vulnerable"


class ScanningLevels:
    EASY = "easy"  # Scans until the first payload found
    HARD = "hard"  # Scan for all payloads


class Case:
    XSS_IN_LINK = "xss_in_link"
    XSS_IN_FORM = "xss_in_form"
    COMMAND_EXEC = "comex"
    HTML = "html"
    SQL = "sql"
    CSRF = "csrf"


def run_scaner(case, scanning_levels, requests_per_minute=None):
    vulnerability_scanner = Scanner(TARGET_URL, LINKS_TO_IGNORE)
    vulnerability_scanner.login(LOGIN_URL, AUTHORIZATION_IN_LOGIN_FORM)

    print(f"{Fore.GREEN}{Style.BRIGHT}\nCrawler Starts 🧐 ==>{Style.RESET_ALL}\n")
    vulnerability_scanner.crawl()
    vulnerability_scanner.write_target_links(TARGET_LINKS_TO_WRITE)

    print(f"{Fore.GREEN}{Style.BRIGHT}\nVulnerability Scanner Starts 🧐 ==> {Style.RESET_ALL}\n")
    vulnerability_scanner.run_scanner(case, scanning_levels, requests_per_minute)

    vulnerability_scanner.write_target_forms_xss(TARGET_FORMS_XSS_TO_WRITE)
    vulnerability_scanner.write_target_links_xss(TARGET_LINKS_XSS_TO_WRITE)
    vulnerability_scanner.write_target_forms_command_exec(TARGET_FORMS_COMMAND_EXEC_TO_WRITE)
    vulnerability_scanner.write_target_forms_html_injection(TARGET_FORMS_HTML_INJECTION_TO_WRITE)
    vulnerability_scanner.write_target_forms_sql_injection(TARGET_FORMS_SQL_INJECTION_TO_WRITE)
    vulnerability_scanner.write_target_forms_csrf_injection(TARGET_FORMS_CSRF_INJECTION_TO_WRITE)
    vulnerability_scanner.write_target_not_vulnerable(TARGET_FORMS_NOT_VULNERABLE)

    vulnerability_scanner.requests_per_minute()


if __name__ == '__main__':
    TARGET_URL = "http://192.168.11.129/dvwa/"
    LOGIN_URL = f"{TARGET_URL}/login.php"

    LINKS_TO_IGNORE = [
        'http://192.168.11.129/dvwa/logout.php',

        "http://192.168.11.129/dvwa/dvwa/css/main.css",
        "http://192.168.11.129/dvwa/vulnerabilities/brute/",
        "http://192.168.11.129/dvwa/favicon.ico",
        "http://192.168.11.129/dvwa/",
        "http://192.168.11.129/dvwa/instructions.php",
        "http://192.168.11.129/dvwa/setup.php",
        "http://192.168.11.129/dvwa/vulnerabilities/exec/",
        "http://192.168.11.129/dvwa/vulnerabilities/csrf/",
        "http://192.168.11.129/dvwa/vulnerabilities/fi/?page=include.php",
        "http://192.168.11.129/dvwa/vulnerabilities/sqli/",
        "http://192.168.11.129/dvwa/vulnerabilities/sqli_blind/",
        "http://192.168.11.129/dvwa/vulnerabilities/upload/",
        # "http://192.168.11.129/dvwa/vulnerabilities/xss_r/",
        "http://192.168.11.129/dvwa/vulnerabilities/xss_s/",
        "http://192.168.11.129/dvwa/security.php",
        "http://192.168.11.129/dvwa/phpinfo.php",
        "http://192.168.11.129/dvwa/phpinfo.php?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000",
        "http://192.168.11.129/dvwa/about.php",
        "http://192.168.11.129/dvwa/instructions.php?doc=PHPIDS-license",
        "http://192.168.11.129/dvwa/instructions.php?doc=readme",
        "http://192.168.11.129/dvwa/instructions.php?doc=changelog",
        "http://192.168.11.129/dvwa/instructions.php?doc=copying",
        "http://192.168.11.129/dvwa/security.php?phpids=on",
        "http://192.168.11.129/dvwa/security.php?phpids=off",
        "http://192.168.11.129/dvwa/security.php?test=%22><script>eval(window.name)</script>",
        "http://192.168.11.129/dvwa/ids_log.php",

    ]

    AUTHORIZATION_IN_LOGIN_FORM = {
        "username": 'admin',
        "password": 'password',
        "Login": 'submit',
    }

    REQUESTS_PER_MINUTE = 60  # def run_scaner --> requests_per_minute=None

    run_scaner([
        # Case.XSS_IN_LINK,
        Case.XSS_IN_FORM,
        # Case.COMMAND_EXEC,
        # Case.HTML,
        # Case.SQL,
        # Case.CSRF,

    ],
        ScanningLevels.EASY)  # add REQUESTS_PER_MINUTE
