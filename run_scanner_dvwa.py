from colorama import Fore, Style

from configurations.menu import menu
from handlers.check_type import check_type
from handlers.file_handler import read_data_from_file, parse_data_from_authorization_file
from handlers.show_param import show_param
from handlers.write_target import Writer
from vulnerability_scanner import Scanner

TARGET_LINKS_TO_WRITE = "LINKS_success"
TARGET_MEDIA_LINKS_TO_WRITE = "MEDIA_LINKS_success"


class ScanningLevels:
    EASY = "easy"  # Scans until the first payload found
    HARD = "hard"  # Scan for all payloads


class Case:
    XSS_IN_LINK = "xss_in_link"
    XSS_IN_FORM = "xss_in_form"
    XSS_IN_HEADER = "xss_in_header"
    COMMAND_IN_LINK = "command_in_link"
    COMMAND_IN_FORM = "command_in_form"
    HTML = "html"
    SQL_IN_LINK = "sql_in_link"
    SQL_IN_FORM = "sql_in_form"
    CSRF = "csrf"


def run_scaner(case, scanning_levels,
               target_url, login_url,
               path_to_links_to_ignore, path_to_authorization_in_login_form, path_to_links_to_crawler,
               collection_media_links, submit_form_post, crawler, requests_per_minute=None):

    links_to_ignore = sorted(set(read_data_from_file(path_to_links_to_ignore)))
    authorization_in_login_form = parse_data_from_authorization_file(path_to_authorization_in_login_form)
    links_to_crawler = sorted(set(read_data_from_file(path_to_links_to_crawler)))

    print(f"{Fore.RED}{Style.BRIGHT}🧐 LINKS_TO_IGNORE: {Style.RESET_ALL}{links_to_ignore}\n")

    vulnerability_scanner = Scanner(target_url, links_to_ignore, submit_form_post)
    vulnerability_scanner.login(login_url, authorization_in_login_form)

    check_crawler = check_type(crawler)
    if check_crawler:
        print(f"{Fore.LIGHTGREEN_EX}{Style.BRIGHT}\nCrawler Starts 🧐 ==>{Style.RESET_ALL}\n")
        vulnerability_scanner.crawl(collection_media_links)
        vulnerability_scanner.write_target_links(TARGET_LINKS_TO_WRITE, TARGET_MEDIA_LINKS_TO_WRITE)

    print(f"{Fore.LIGHTGREEN_EX}{Style.BRIGHT}\nVulnerability Scanner Starts 🧐 ==> {Style.RESET_ALL}\n")
    vulnerability_scanner.run_scanner(case=case,
                                      scanning_level=scanning_levels,
                                      crawler=crawler,
                                      links_to_crawler=links_to_crawler,
                                      req_per_minute=requests_per_minute)

    vulnerability_scanner.requests_per_minute()

    all_lists = vulnerability_scanner.get_all_lists()
    writer = Writer(all_lists)
    writer.write_target_success()


if __name__ == '__main__':
    (DIRECTORY_INPUT, DEF_OUTPUT_DIRECTORY,
     TARGET_URL, LOGIN_URL,
     PATH_TO_LINKS_TO_IGNORE, PATH_TO_AUTHORIZATION_IN_LOGIN_FORM, PATH_TO_LINKS_TO_CRAWLER,
     REQUESTS_PER_MINUTE, COLLECTION_MEDIA_LINKS, SUBMIT_FORM_POST, CRAWLER) = menu()

    show_param(DIRECTORY_INPUT, DEF_OUTPUT_DIRECTORY,
     TARGET_URL, LOGIN_URL,
     PATH_TO_LINKS_TO_IGNORE, PATH_TO_AUTHORIZATION_IN_LOGIN_FORM, PATH_TO_LINKS_TO_CRAWLER,
     REQUESTS_PER_MINUTE, COLLECTION_MEDIA_LINKS, SUBMIT_FORM_POST, CRAWLER)

    run_scaner(case=[
        Case.XSS_IN_LINK,
        Case.XSS_IN_FORM,
        Case.XSS_IN_HEADER,
        Case.COMMAND_IN_LINK,
        Case.COMMAND_IN_FORM,
        Case.HTML,  # In developing
        Case.SQL_IN_LINK,
        Case.SQL_IN_FORM,
        # Case.CSRF,
    ],
        scanning_levels=ScanningLevels.EASY,
        target_url=TARGET_URL,
        login_url=LOGIN_URL,
        path_to_links_to_ignore=PATH_TO_LINKS_TO_IGNORE,
        path_to_authorization_in_login_form=PATH_TO_AUTHORIZATION_IN_LOGIN_FORM,
        path_to_links_to_crawler=PATH_TO_LINKS_TO_CRAWLER,
        collection_media_links=COLLECTION_MEDIA_LINKS,
        submit_form_post=SUBMIT_FORM_POST,
        crawler=CRAWLER,
        # requests_per_minute=REQUESTS_PER_MINUTE,  # add REQUESTS_PER_MINUTE
    )
