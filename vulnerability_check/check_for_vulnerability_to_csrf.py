import copy
import html
import random
import re
import string

from bs4 import BeautifulSoup
from bs4 import Tag
from colorama import Fore, Style

NEW_USERNAME = 'new_username'
NEW_PASSWORD_TEST = 'new_password'

# List of possible success messages
SUCCESS_MESSAGES = [
    "Login successful",
    "Successfully logged in",
    "Welcome back",
    "Access granted",
    "Authentication successful",
    "Logged in successfully",
    "Login complete",
    "You are now logged in",
    "Welcome, you're logged in",
    "Sign-in successful"
]

PROTECTION = 'csrf|protect|token|csrf_token|csrf_protect'
VALUES = 'email|username|password'


def extract_form_values(self, form):
    """Extracts the CSRF token and username value from a form."""

    csrf_input = form.find('input', {'name': lambda name: re.search(PROTECTION, name) if name else None})
    username_input = form.find('input', {'name': lambda name: re.search(VALUES, name) if name else None})

    csrf_token = csrf_input.get('value') if csrf_input else None
    username_value = username_input.get('value') if username_input else None
    name_value = username_input.get('name') if username_input else None

    return csrf_token, username_value, name_value


def replace_csrf_token_in_form(self, form, csrf_token):
    """Replaces the CSRF token in the form with the given CSRF token."""
    csrf_input = form.find('input', {'name': lambda name: re.search(PROTECTION, name)})
    if csrf_input:
        csrf_input['value'] = csrf_token
    return form


def remove_csrf_token_in_form(self, form):
    if not isinstance(form, Tag):
        form = BeautifulSoup(form, 'html.parser')
    csrf_input = form.find('input', {'name': lambda name: re.search('csrf_protect', name)})
    if csrf_input:
        csrf_input.decompose()
    return form


def action_performed(self, url, username, new_password):
    """Checks if the action (e.g., password change) was performed."""

    login_form = self.extract_forms(url)[0]  # assuming the login form is the first form on the page
    response = self.submit_form(form=login_form, value={"username": username, "password": new_password}, url=url)

    # Check if any of the success messages is in the response text
    return any(message in response.text for message in SUCCESS_MESSAGES)


def test_csrf_injection_in_form(self, form, url: str):
    """Tests a form for CSRF vulnerability and returns the result."""

    results = []
    csrf_token, username_value, name_value = extract_form_values(self, form)
    if csrf_token or username_value or name_value:
        print(f"\n[+] csrf_token = {csrf_token}\n[+] username_value = {username_value}\n[+] name_value = {name_value}")
    else:
        return None

    value_match = next((value for value in VALUES.split('|') if value in name_value), 'username')
    prefix_email = ''.join(random.choice(string.ascii_lowercase) for _ in range(15))
    new_value = f"{prefix_email}@email.com" if value_match == 'email' else f"test{value_match}"

    form_copy = copy.deepcopy(form)
    if csrf_token:
        print(f"{Fore.MAGENTA}{Style.BRIGHT}\nreplace_csrf_token_in_form ==> \n{form_copy}{Style.RESET_ALL}\n")
        # Test form without CSRF token
        form_without_csrf = replace_csrf_token_in_form(self, form_copy, '')
        # form_without_csrf = replace_csrf_token_in_form(self, form, csrf_token)
        response_without_csrf = self.submit_form(form=form_without_csrf,
                                                 value=new_value, url=url)

        # print(f"response_without_csrf.text ==> {response_without_csrf.text}")
        if new_value in response_without_csrf.text or html.escape(new_value) in response_without_csrf.text:
            results.append((True, new_value))

        print(f"{Fore.MAGENTA}{Style.BRIGHT}\nremove_csrf_token_in_form ==> \n{form}{Style.RESET_ALL}\n")
        # Test form remove input CSRF attribute
        form_remove_csrf = remove_csrf_token_in_form(self, form)
        response_remove_csrf = self.submit_form(form=form_remove_csrf,
                                                value=new_value, url=url)

        if new_value in response_remove_csrf.text or html.escape(new_value) in response_remove_csrf.text:
            results.append((True, new_value))

    return results
