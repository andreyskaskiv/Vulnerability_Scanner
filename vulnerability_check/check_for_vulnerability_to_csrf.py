from bs4 import BeautifulSoup

NEW_USERNAME = 'new_username'
NEW_PASSWORD_TEST = 'new_password'

# List of possible success messages
SUCCESS_MESSAGES = [
    "Login successful",
    "Successfully logged in",
    "Welcome back",
    "Access granted",
    "Authentication successful",
    "Logged in successfully",
    "Login complete",
    "You are now logged in",
    "Welcome, you're logged in",
    "Sign-in successful"
]


def extract_form_values(self, form):
    """Extracts the CSRF token and username value from a form."""

    csrf_input = form.find('input', {'name': 'csrf_token'})
    username_input = form.find('input', {'name': 'username'})

    csrf_token = csrf_input.get('value') if csrf_input else None
    username_value = username_input.get('value') if username_input else None

    return csrf_token, username_value


def replace_csrf_token_in_form(self, form_html, csrf_token):
    """Replaces the CSRF token in the form HTML with the given CSRF token."""
    return form_html.replace('value=""', f'value="{csrf_token}"')


def action_performed(self, url, username, new_password):
    """Checks if the action (e.g., password change) was performed."""

    login_form = self.extract_forms(url)[0]  # assuming the login form is the first form on the page
    response = self.submit_form(form=login_form, value={"username": username, "password": new_password}, url=url)

    # Check if any of the success messages is in the response text
    return any(message in response.text for message in SUCCESS_MESSAGES)


def evaluate_test_results(self, normal_response, response_without_csrf, url, form):
    """Evaluates the test results and returns the result."""
    if response_without_csrf.status_code != normal_response.status_code or response_without_csrf.text != normal_response.text:
        return True, url, form
    elif not action_performed(self, url, NEW_USERNAME, NEW_PASSWORD_TEST):
        return False, None, None
    else:
        return False, None, None


def test_csrf_injection_in_form(self, form, url: str):
    """Tests a form for CSRF vulnerability and returns the result."""

    csrf_token, username_value = extract_form_values(self, form)
    if csrf_token and username_value:
        print(f"[+] csrf_token = {csrf_token}, username_value = {username_value}")

    form_html = str(form)

    # Test form with CSRF token
    form_with_csrf = replace_csrf_token_in_form(self, form_html, csrf_token)
    normal_response = self.submit_form(form=BeautifulSoup(form_with_csrf, 'html.parser'),
                                       value={"username": username_value}, url=url)

    # Test form without CSRF token
    form_without_csrf = replace_csrf_token_in_form(self, form_html, '')
    response_without_csrf = self.submit_form(form=BeautifulSoup(form_without_csrf, 'html.parser'),
                                             value={"username": username_value}, url=url)

    return evaluate_test_results(self, normal_response, response_without_csrf, url, form)
