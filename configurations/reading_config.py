import configparser
import os
from pathlib import Path

from handlers.check_type import check_type


class Case:
    XSS_IN_LINK = "xss_in_link"
    XSS_IN_FORM = "xss_in_form"
    XSS_IN_HEADER = "xss_in_header"
    COMMAND_IN_LINK = "command_in_link"
    COMMAND_IN_FORM = "command_in_form"
    HTML = "html"
    SQL_IN_LINK = "sql_in_link"
    SQL_IN_FORM = "sql_in_form"
    CSRF = "csrf"


class ScanningLevels:
    EASY = "easy"  # Scans until the first payload found
    HARD = "hard"  # Scan for all payloads


def get_config(configfile: str):
    base_dir = Path(__file__).resolve().parent.parent
    path_to_config = os.path.join(base_dir, configfile)

    config = configparser.ConfigParser()
    config.read(path_to_config)
    return config, base_dir


def get_config_settings(config, base_dir):
    """Read in `DEFAULTS.cfg` to obtain default configuration values."""
    directory_int = config["SETTINGS"]["INPUT_DIRECTORY"].split('#')[0]
    directory_out = config["SETTINGS"]["OUTPUT_DIRECTORY"].split('#')[0]

    input_directory = os.path.join(base_dir, directory_int)
    output_directory = os.path.join(base_dir, directory_out)

    return input_directory, output_directory


def get_config_parameters(config):
    """Read in `DEFAULTS.cfg` to obtain default configuration values."""
    target_url = config["PARAMETERS"]["TARGET_URL"]
    login_url = config["PARAMETERS"]["LOGIN_URL"]

    path_to_links_to_ignore = config["PARAMETERS"]["PATH_TO_LINKS_TO_IGNORE"]
    path_to_authorization_in_login_form = config["PARAMETERS"]["PATH_TO_AUTHORIZATION_IN_LOGIN_FORM"]
    path_to_links_to_crawler = config["PARAMETERS"]["PATH_TO_LINKS_TO_CRAWLER"]

    requests_per_minute = int(config["PARAMETERS"]["REQUESTS_PER_MINUTE"])
    collection_media_links = config["PARAMETERS"]["COLLECTION_MEDIA_LINKS"]
    submit_form_post = config["PARAMETERS"]["SUBMIT_FORM_POST"]
    crawler = config["PARAMETERS"]["CRAWLER"]

    return (target_url, login_url,
            path_to_links_to_ignore, path_to_authorization_in_login_form, path_to_links_to_crawler,
            requests_per_minute, collection_media_links, submit_form_post, crawler)


def get_enabled_checks(config):
    """Read in `DEFAULTS.cfg` to obtain enabled checks."""
    return [getattr(Case, attr) for attr in vars(Case).keys() if
            not attr.startswith('__') and check_type(config["CHECK"][attr])]


def get_level(config):
    level = config["SCANNING_LEVELS"]["LEVEL"]
    return "easy" if level == "easy" else "hard"
