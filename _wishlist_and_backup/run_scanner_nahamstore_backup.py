from pprint import pprint

from colorama import Fore, Style

from vulnerability_scanner import Scanner

TARGET_LINKS_TO_WRITE = "LINKS_success"
TARGET_FORMS_XSS_TO_WRITE = "forms_XSS_success"
TARGET_LINKS_XSS_TO_WRITE = "links_XSS_success"
TARGET_HEADERS_XSS_TO_WRITE = "headers_XSS_success"
TARGET_FORMS_COMMAND_EXEC_TO_WRITE = "forms_COMMAND_EXEC_success"
TARGET_FORMS_HTML_INJECTION_TO_WRITE = "forms_HTML_INJECTION_success"
TARGET_FORMS_SQL_INJECTION_TO_WRITE = "forms_SQL_INJECTION_success"
TARGET_FORMS_CSRF_INJECTION_TO_WRITE = "forms_CSRF_INJECTION_success"
TARGET_FORMS_NOT_VULNERABLE = "forms_not_vulnerable"


class ScanningLevels:
    EASY = "easy"  # Scans until the first payload found
    HARD = "hard"  # Scan for all payloads


class Case:
    XSS_IN_LINK = "xss_in_link"
    XSS_IN_FORM = "xss_in_form"
    XSS_IN_HEADER = "xss_in_header"
    COMMAND_EXEC = "comex"
    HTML = "html"
    SQL = "sql"
    CSRF = "csrf"


def run_scaner(case, scanning_levels, requests_per_minute=None):
    vulnerability_scanner = Scanner(TARGET_URL, LINKS_TO_IGNORE)
    vulnerability_scanner.login(LOGIN_URL, AUTHORIZATION_IN_LOGIN_FORM)
    # vulnerability_scanner.login_with_cookie(LOGIN_URL, AUTHORIZATION_IN_COOKIE)

    print(f"{Fore.GREEN}{Style.BRIGHT}\nCrawler Starts 🧐 ==>{Style.RESET_ALL}\n")
    vulnerability_scanner.crawl()
    vulnerability_scanner.write_target_links(TARGET_LINKS_TO_WRITE)

    print(f"{Fore.GREEN}{Style.BRIGHT}\nVulnerability Scanner Starts 🧐 ==> {Style.RESET_ALL}\n")
    vulnerability_scanner.run_scanner(case, scanning_levels, requests_per_minute)

    vulnerability_scanner.write_target_forms_xss(TARGET_FORMS_XSS_TO_WRITE)
    vulnerability_scanner.write_target_links_xss(TARGET_LINKS_XSS_TO_WRITE)
    vulnerability_scanner.write_target_headers_xss(TARGET_HEADERS_XSS_TO_WRITE)
    vulnerability_scanner.write_target_forms_command_exec(TARGET_FORMS_COMMAND_EXEC_TO_WRITE)
    vulnerability_scanner.write_target_forms_html_injection(TARGET_FORMS_HTML_INJECTION_TO_WRITE)
    vulnerability_scanner.write_target_forms_sql_injection(TARGET_FORMS_SQL_INJECTION_TO_WRITE)
    vulnerability_scanner.write_target_forms_csrf_injection(TARGET_FORMS_CSRF_INJECTION_TO_WRITE)
    vulnerability_scanner.write_target_not_vulnerable(TARGET_FORMS_NOT_VULNERABLE)

    vulnerability_scanner.requests_per_minute()


if __name__ == '__main__':
    TARGET_URL = "http://nahamstore.thm/"
    # TARGET_URL = "http://marketing.nahamstore.thm/"

    LOGIN_URL = f"{TARGET_URL}login"

    LINKS_TO_IGNORE = [
        "http://nahamstore.thm/logout",
        'http://nahamstore.thm/account/settings/disable',

        'http://nahamstore.thm/',
        'http://nahamstore.thm/returns',
        'http://nahamstore.thm/account/orders',
        # 'http://nahamstore.thm/account/settings',
        'http://nahamstore.thm/account/addressbook',
        'http://nahamstore.thm/basket',
        # 'http://nahamstore.thm/account/settings/email',
        'http://nahamstore.thm/account/settings/password',
        'http://nahamstore.thm/product?id=2&name=Sticker+Pack',
        'http://nahamstore.thm/product?id=2',
        'http://nahamstore.thm/product?id=1&name=Hoodie+%2B+Tee',
        'http://nahamstore.thm/product?id=1'


    ]

    print(f"{Fore.RED}{Style.BRIGHT}🧐 LINKS_TO_IGNORE: {Style.RESET_ALL}{LINKS_TO_IGNORE}\n")

    AUTHORIZATION_IN_LOGIN_FORM = {
        "login_email": 'test@test.com',
        "login_password": 'testpass',
        "Login": 'submit',
    }

    AUTHORIZATION_IN_COOKIE = {
        'session': 'c6f912633be1910a386621ad62846c72',
        'token': 'e590d3331e89345558bde0655b8e19bd'
    }

    REQUESTS_PER_MINUTE = 60  # def run_scaner --> requests_per_minute=None

    run_scaner([
        # Case.XSS_IN_LINK,
        # Case.XSS_IN_FORM,
        # Case.XSS_IN_HEADER,
        # Case.COMMAND_EXEC,
        # Case.HTML,
        # Case.SQL,
        Case.CSRF,
    ],
        ScanningLevels.EASY)  # add REQUESTS_PER_MINUTE
